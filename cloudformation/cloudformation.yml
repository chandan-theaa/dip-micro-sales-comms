---
AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Service
Parameters:
  Env:
    Type: String
    Description: Env
    Default: sandbox
  EnvId:
    Type: String
    Description: Env ID
    Default: develop
  ServiceName:
    Type: String
    Description: Service Name
  Platform:
    Type: String
    Description: Platform
    Default: "dip"
  ImageUrl:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Docker Image URL
    Default: /DockerUrl
  Version:
    Type: String
    Description: Version
    Default: latest
  CpuScalePercentage:
    Type: String
    Default: "80"
  Cpu:
    Type: String
    Default: "512"
  Memory:
    Type: String
    Default: "2048"
  LogsDestination:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Event Log Destination
    Default: "/LogsDestination"

Mappings: 
  EnvironmentSettings:
    sandbox:
      ServiceMinCount: 1
      ServiceMaxCount: 1
      LogRetentionInDays: 7
      MinimumHealthyPercent: 0
      MaximumPercent: 100
    ci:
      ServiceMinCount: 1
      ServiceMaxCount: 1
      LogRetentionInDays: 7
      MinimumHealthyPercent: 0
      MaximumPercent: 100
    qa:
      ServiceMinCount: 2
      ServiceMaxCount: 2
      LogRetentionInDays: 30
      MinimumHealthyPercent: 50
      MaximumPercent: 100
    uat:
      ServiceMinCount: 2
      ServiceMaxCount: 4
      LogRetentionInDays: 30
      MinimumHealthyPercent: 100
      MaximumPercent: 200
    stge:
      ServiceMinCount: 3
      ServiceMaxCount: 9
      LogRetentionInDays: 30
      MinimumHealthyPercent: 100
      MaximumPercent: 200
    prod:
      ServiceMinCount: 3
      ServiceMaxCount: 9
      LogRetentionInDays: 30
      MinimumHealthyPercent: 100
      MaximumPercent: 200

Resources:
  #######
  #
  # Service Specific Start
  #
  #######
  SalesCommsDLQ:
    Type: AWS::SQS::Queue 
  
  SalesCommsQueue:
    DependsOn: SalesCommsDLQ
    Type: AWS::SQS::Queue
    Properties:
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt 'SalesCommsDLQ.Arn'
        maxReceiveCount: 5
      VisibilityTimeout: 30     

  SalesCommsQueuePolicy:
     Type: AWS::SQS::QueuePolicy
     Properties:
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
            - "sqs:SendMessage"
          Principal:
            AWS: '*'
          Resource: !GetAtt SalesCommsQueue.Arn
          Condition:
            ArnEquals:
              "aws:SourceArn": !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:dip-sales-${Env}-${EnvId}"
      Queues:
      - !Ref SalesCommsQueue
      
  SalesCommsQueueSubscription:
     Type: AWS::SNS::Subscription
     Properties:
      Protocol: sqs
      FilterPolicy:
        X-THEAA-EVENT_TYPE:
          - prefix: DIP-SALES.BREAKDOWN.QUOTE
          - prefix: DIP-SALES.PAYMENT.SUCCESS
      Endpoint: !GetAtt SalesCommsQueue.Arn
      TopicArn: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:dip-sales-${Env}-${EnvId}"
  
      
  SalesCommsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions: 
        -
          AttributeName: QUOTE_REF
          AttributeType: S
      KeySchema: 
        -
          AttributeName: QUOTE_REF
          KeyType: HASH 
     
      TimeToLiveSpecification:
         AttributeName: TTL
         Enabled: true 
 
  
  #######
  #
  # Service Specific End
  #
  #######          
  ServiceLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Join ["/", ["/aws/ecs", !Ref "AWS::StackName" ]]
      RetentionInDays: !FindInMap [EnvironmentSettings, !Ref Env, LogRetentionInDays]
  ERRORMetric: 
    Type: AWS::Logs::MetricFilter
    Properties: 
      LogGroupName: !Ref ServiceLogGroup
      FilterPattern: "[timestamp, AppName, ClusterName, TraceId, SpanId, thread, level = ERROR, logger, message]"
      MetricTransformations: 
        - 
          MetricValue: "1"
          MetricNamespace: !Ref ServiceLogGroup
          MetricName: "ERROR"
  WARNMetric:
    Type: AWS::Logs::MetricFilter
    Properties: 
      LogGroupName: !Ref ServiceLogGroup
      FilterPattern: "[timestamp, AppName, ClusterName, TraceId, SpanId, thread, level = WARN, logger, message]"
      MetricTransformations: 
        - 
          MetricValue: "1"
          MetricNamespace: !Ref ServiceLogGroup
          MetricName: "WARN"
  ERRORAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: High ERROR rate
      Namespace: !Ref ServiceLogGroup
      MetricName: ERROR
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '2'
      ComparisonOperator: GreaterThanThreshold
      Threshold: !FindInMap [EnvironmentSettings, !Ref Env, ServiceMinCount]
      Unit: Count
      TreatMissingData: ignore
      AlarmActions:
      - !ImportValue AlertsSnsArn


  LogsDeliveryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Logs Delivery Error
      Namespace: AWS/Logs
      MetricName: DeliveryErrors
      Statistic: Sum
      Period: '60'
      EvaluationPeriods: '2'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '1'
      Unit: Count
      TreatMissingData: ignore
      Dimensions:
        - Name: DestinationType
          Value: Kinesis
        - Name: LogGroupName
          Value: !Ref ServiceLogGroup
        - Name: FilterName
          Value: !Ref ElasticsearchSubscription
      AlarmActions:
      - !ImportValue AlertsSnsArn

  ElasticsearchSubscription:
    Type: "AWS::Logs::SubscriptionFilter"
    Properties:
      DestinationArn: !Ref LogsDestination
      FilterPattern: "{ $.eventType = * }"
      LogGroupName: !Ref ServiceLogGroup

  ServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: !Ref ServiceName
      DnsConfig:
        DnsRecords: [{Type: A, TTL: "10"}]
        NamespaceId: 
          Fn::ImportValue:
              !Sub ${Platform}-${Env}-${EnvId}-ecs-sd
      HealthCheckCustomConfig:
        FailureThreshold: 4
      # HealthCheckConfig:
      #   ResourcePath: /
      #   Type: HTTP
      #   FailureThreshold: 4


  TaskRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - ecs-tasks.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: "/"
        Policies:
        - PolicyName: spring-cloud
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - autoscaling:Describe*
              - cloudformation:Describe*
              - cloudformation:List*
              - ssm:Get*
              - ssm:List*
              Resource: '*'       
#######
#
# Service Specific Start
#
####### 
        - PolicyName: dynamodb
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - "dynamodb:GetItem"
              - "dynamodb:PutItem"
              - "dynamodb:DeleteItem"
              - "dynamodb:Query"
              - "dynamodb:UpdateItem"
              - "dynamodb:BatchWriteItem"
              - "dynamodb:BatchGetItem"
              - "dynamodb:DescribeTable"
              Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AWS::StackName}*   
                
        - PolicyName: sqs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "sqs:ChangeMessageVisibility"
                  - "sqs:ChangeMessageVisibilityBatch"
                  - "sqs:DeleteMessage"
                  - "sqs:DeleteMessageBatch"
                  - "sqs:GetQueueAttributes"
                  - "sqs:GetQueueUrl"
                  - "sqs:ReceiveMessage"
                Resource: 
                - !GetAtt SalesCommsQueue.Arn
       
        - PolicyName: sqsWrite
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "sqs:GetQueueAttributes"
                  - "sqs:GetQueueUrl"
                  - "sqs:SendMessage"
                Resource: 
                - !GetAtt SalesCommsDLQ.Arn

#######
#
# Service Specific End
#
#######  

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref AWS::StackName
      Cpu: !Ref Cpu
      Memory: !Ref Memory
      TaskRoleArn: !Ref TaskRole
      ExecutionRoleArn: 
        Fn::ImportValue:
              !Sub ${Platform}-${Env}-${EnvId}-ecs-iam
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ContainerDefinitions:
      - Name: !Ref ServiceName
        Cpu: !Ref Cpu
        Essential: 'true'
        Image: !Sub ${ImageUrl}/${Platform}-${ServiceName}:${Version}
        Memory: !Ref Memory
        PortMappings:
        - ContainerPort: 80
        - ContainerPort: 81
        - ContainerPort: 82
        Environment:
        - Name: VERSION
          Value: !Ref Version
        - Name: JAVA_TOOL_OPTIONS
          Value: !Sub >-
            -Xss1024m
            -Xms25m
            -Xmx1650m
            -XX:MaxMetaspaceSize=210m
            -XX:+UnlockExperimentalVMOptions
            -XX:+UseCGroupMemoryLimitForHeap
            -XX:MaxRAMFraction=1
            -Dserver.port=80
            -Dmanagement.server.port=82
            -Dcom.sun.management.jmxremote=true 
            -Dcom.sun.management.jmxremote.authenticate=false 
            -Dcom.sun.management.jmxremote.local.only=false 
            -Dcom.sun.management.jmxremote.port=81 
            -Dcom.sun.management.jmxremote.ssl=false 
            -Dspring.profiles.active=${Env}-${EnvId}
            -Dcloud.aws.region.static=${AWS::Region}
            -Dcloud.aws.stack.name=${AWS::StackName}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Join ["/", ["/aws/ecs", !Ref "AWS::StackName" ]]
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: instance
      Volumes: []

  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscovery.Arn
      LaunchType: FARGATE
      Cluster: !Sub ${Platform}-${Env}-${EnvId}-ecs
      DesiredCount: !FindInMap [EnvironmentSettings, !Ref Env, ServiceMinCount]
      DeploymentConfiguration:
        MaximumPercent: !FindInMap [EnvironmentSettings, !Ref Env, MaximumPercent]
        MinimumHealthyPercent: !FindInMap [EnvironmentSettings, !Ref Env, MinimumHealthyPercent]
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - Fn::ImportValue:
              !Sub ${Platform}-${Env}-${EnvId}-ecs-sg
          Subnets: !Split [",", !ImportValue PrivateSubnetIds]


  ScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "application-autoscaling:*"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:SetAlarmState"
                  - "cloudwatch:DeleteAlarms"
                  - "ecs:DescribeServices"
                  - "ecs:UpdateService"
                Resource: "*"


  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !FindInMap [EnvironmentSettings, !Ref Env, ServiceMaxCount]
      MinCapacity: !FindInMap [EnvironmentSettings, !Ref Env, ServiceMinCount]
      ResourceId: !Join
      - "/" 
      - - service
        - Fn::ImportValue: !Sub ${Platform}-${Env}-${EnvId}-ecs
        - !GetAtt Service.Name
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  ScaleUp:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ParserPolicyUp
      PolicyType: StepScaling
      ScalingTargetId: !Ref "ScalableTarget"
      StepScalingPolicyConfiguration:
        Cooldown: 60
        MetricAggregationType: "Average"
        AdjustmentType: "ChangeInCapacity"
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          MetricIntervalUpperBound: 100
          ScalingAdjustment: 1
        - MetricIntervalLowerBound: 100
          ScalingAdjustment: 2
  ScaleDown:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ParserPolicyDown
      PolicyType: StepScaling
      ScalingTargetId: !Ref "ScalableTarget"
      StepScalingPolicyConfiguration:
        Cooldown: 60
        MetricAggregationType: "Average"
        AdjustmentType: "ChangeInCapacity"
        StepAdjustments:
          - MetricIntervalUpperBound: -1
            MetricIntervalLowerBound: -100
            ScalingAdjustment: -1
          - MetricIntervalUpperBound: -100
            ScalingAdjustment: -2

  CPUAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: !Sub ${Platform}-${Env}-${EnvId}-${ServiceName}-CPUScale
      AlarmDescription: "Trigger scaling based on CPU"
      Namespace: "AWS/ECS"
      MetricName: "CPUUtilization"
      ComparisonOperator: "GreaterThanThreshold"
      Dimensions:
        - Name: ClusterName
          Value: !Sub ${Platform}-${Env}-${EnvId}-ecs
        - Name: ServiceName
          Value: !GetAtt Service.Name
      EvaluationPeriods: 2
      Period: 60
      Statistic: 'Average'
      Threshold: !Ref CpuScalePercentage
      AlarmActions:
        - !Ref "ScaleUp"
        - !Ref "ScaleDown"
        - !ImportValue AlertsSnsArn

      OKActions:
        - !Ref "ScaleUp"
        - !Ref "ScaleDown"
        - !ImportValue AlertsSnsArn 

  MemoryAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: !Sub ${Platform}-${Env}-${EnvId}-${ServiceName}-Memory
      AlarmDescription: "MemoryAlarm"
      Namespace: "AWS/ECS"
      MetricName: "MemoryUtilization"
      ComparisonOperator: "GreaterThanThreshold"
      Dimensions:
        - Name: ClusterName
          Value: !Sub ${Platform}-${Env}-${EnvId}-ecs
        - Name: ServiceName
          Value: !GetAtt Service.Name
      EvaluationPeriods: 2
      Period: 60
      Statistic: 'Average'
      Threshold: 90
      AlarmActions:
        - !ImportValue AlertsSnsArn 
      OKActions:
        - !ImportValue AlertsSnsArn

  ServiceCountAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Platform}-${Env}-${EnvId}-${ServiceName}-ServiceCount
      AlarmDescription: Service Count
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Statistic: SampleCount
      Period: '60'
      EvaluationPeriods: '2'
      ComparisonOperator: LessThanThreshold
      Threshold: !FindInMap [EnvironmentSettings, !Ref Env, ServiceMinCount]
      Dimensions:
      - Name: ServiceName
        Value: !GetAtt Service.Name
      - Name: ClusterName
        Value: !Sub ${Platform}-${Env}-${EnvId}-ecs
      AlarmActions:
        - !ImportValue AlertsSnsArn
      OKActions:
        - !ImportValue AlertsSnsArn



  # SQSAlarm:
  #   Type: "AWS::CloudWatch::Alarm"
  #   Properties:
  #     AlarmName: "SQSAlarm"
  #     AlarmDescription: "Trigger scaling based on SQS queue"
  #     Namespace: "AWS/SQS"
  #     MetricName: "ApproximateNumberOfMessagesVisible"
  #     ComparisonOperator: "GreaterThanThreshold"
  #     Dimensions:
  #       - Name: QueueName
  #         Value: !Ref "sqsQueue"
  #     EvaluationPeriods: 2
  #     Period: 300
  #     Statistic: 'Average'
  #     Threshold: 1000
  #     AlarmActions:
  #       - !Ref "ScaleUp"
  #       - !Ref "ScaleDown"
  #     OKActions:
  #       - !Ref "ScaleUp"
  #       - !Ref "ScaleDown"

  # AlarmScaleUp:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     EvaluationPeriods: '1'
  #     Statistic: Average
  #     Threshold: '10'
  #     AlarmDescription: Scale up Service.
  #     Period: '60'
  #     AlarmActions: [!Ref 'ServiceScalingPolicy']
  #     Platform: AWS/ApplicationELB
  #     Dimensions:
  #       - Name: LoadBalancer
  #         Value: !GetAtt 
  #           - ECSALB
  #           - LoadBalancerFullName
  #     ComparisonOperator: GreaterThanThreshold
  #     MetricName: HTTPCode_ELB_5XX_Count


Outputs:
  Version:
    Description: Version control
    Value: !Ref Version